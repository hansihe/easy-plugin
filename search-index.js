var searchIndex = {};
searchIndex["easy_plugin"] = {"doc":"This crate provides a compiler plugin, `easy_plugin!`, which makes it easier to write compiler\nplugins.","items":[[3,"Specification","easy_plugin","A sequence of specifiers.",null,null],[12,"0","","",0,null],[4,"Match","","A plugin argument that has been matched with a named specifier.",null,null],[13,"Attr","","An attribute (e.g., `#[cfg(target_os = &quot;windows&quot;)]`).",1,null],[13,"BinOp","","A binary operator (e.g., `+`, `*`).",1,null],[13,"Block","","A brace-delimited sequence of statements (e.g., `{ log(error, &quot;hi&quot;); return 12; }`).",1,null],[13,"Delim","","A delimited sequence of token trees (e.g., `()`, `[foo - &quot;bar&quot;]`).",1,null],[13,"Expr","","An expression (e.g., `2 + 2`, `if true { 1 } else { 2 }`, `f(42)`).",1,null],[13,"Ident","","An identifier (e.g., `x`, `foo`).",1,null],[13,"Item","","An item (e.g., `fn foo() { }`, `struct Bar;`).",1,null],[13,"Lftm","","A lifetime (e.g., `&#39;a`).",1,null],[13,"Lit","","A literal (e.g., `322`, `&#39;a&#39;`, `&quot;foo&quot;`).",1,null],[13,"Meta","","A &quot;meta&quot; item, as found in attributes (e.g., `cfg(target_os = &quot;windows&quot;)`).",1,null],[13,"Pat","","A pattern (e.g., `Some(t)`, `(17, &#39;a&#39;)`, `_`).",1,null],[13,"Path","","A qualified name (e.g., `T::SpecialA`).",1,null],[13,"Stmt","","A single statement (e.g., `let x = 3`).",1,null],[13,"Ty","","A type (e.g., `i32`, `Vec&lt;(char, String)&gt;`, `&amp;T`).",1,null],[13,"Tok","","A single token.",1,null],[13,"Tt","","A single token tree.",1,null],[13,"Sequence","","A sequence which may either contain sequence matches or subsequences.",1,null],[13,"NamedSequence","","A count of named sequence repetitions.",1,null],[4,"Amount","","Indicates how many times a sequence is allowed to occur.",null,null],[13,"OneOrMore","","`+`",2,null],[13,"ZeroOrMore","","`*`",2,null],[13,"ZeroOrOne","","`?`",2,null],[4,"Specifier","","A piece of a plugin argument specification.",null,null],[13,"Attr","","An attribute (e.g., `#[cfg(target_os = &quot;windows&quot;)]`).",3,null],[13,"BinOp","","A binary operator (e.g., `+`, `*`).",3,null],[13,"Block","","A brace-delimited sequence of statements (e.g., `{ log(error, &quot;hi&quot;); return 12; }`).",3,null],[13,"Delim","","A delimited sequence of token trees (e.g., `()`, `[foo - &quot;bar&quot;]`).",3,null],[13,"Expr","","An expression (e.g., `2 + 2`, `if true { 1 } else { 2 }`, `f(42)`).",3,null],[13,"Ident","","An identifier (e.g., `x`, `foo`).",3,null],[13,"Item","","An item (e.g., `fn foo() { }`, `struct Bar;`).",3,null],[13,"Lftm","","A lifetime (e.g., `&#39;a`).",3,null],[13,"Lit","","A literal (e.g., `322`, `&#39;a&#39;`, `&quot;foo&quot;`).",3,null],[13,"Meta","","A &quot;meta&quot; item, as found in attributes (e.g., `cfg(target_os = &quot;windows&quot;)`).",3,null],[13,"Pat","","A pattern (e.g., `Some(t)`, `(17, &#39;a&#39;)`, `_`).",3,null],[13,"Path","","A qualified name (e.g., `T::SpecialA`).",3,null],[13,"Stmt","","A single statement (e.g., `let x = 3`).",3,null],[13,"Ty","","A type (e.g., `i32`, `Vec&lt;(char, String)&gt;`, `&amp;T`).",3,null],[13,"Tok","","A single token.",3,null],[13,"Tt","","A single token tree.",3,null],[13,"Specific","","A non-variable piece.",3,null],[13,"Delimited","","A delimited piece.",3,null],[13,"Sequence","","A sequence piece.",3,null],[13,"NamedSequence","","A named sequence piece.",3,null],[5,"parse_arguments","","Parses the supplied arguments with the supplied specification.",null,null],[5,"parse_specification","","Parses the supplied specification.",null,null],[11,"eq","","",1,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"match"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"match"}],"output":{"name":"match"}}],[11,"as_attr","","Returns this attribute match.",1,{"inputs":[{"name":"match"}],"output":{"name":"attribute"}}],[11,"as_bin_op","","Returns this binary operator match.",1,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"as_block","","Returns this block match.",1,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"as_delim","","Returns this delimited match.",1,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"as_expr","","Returns this expression match.",1,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"as_ident","","Returns this identifier match.",1,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"as_item","","Returns this item match.",1,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"as_lftm","","Returns this lifetime match.",1,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"as_lit","","Returns this literal match.",1,{"inputs":[{"name":"match"}],"output":{"name":"lit"}}],[11,"as_meta","","Returns this &quot;meta&quot; item match.",1,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"as_pat","","Returns this pattern match.",1,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"as_path","","Returns this path match.",1,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"as_stmt","","Returns this statement match.",1,{"inputs":[{"name":"match"}],"output":{"name":"stmt"}}],[11,"as_ty","","Returns this type match.",1,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"as_tok","","Returns this token match.",1,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"as_tt","","Returns this token tree match.",1,{"inputs":[{"name":"match"}],"output":{"name":"tokentree"}}],[11,"as_sequence","","Returns this collection of sequence matches or subsequences.",1,{"inputs":[{"name":"match"}],"output":{"name":"vec"}}],[11,"as_named_sequence","","Returns this count of named sequence repetitions.",1,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"as_named_sequence_bool","","Returns whether this count of named sequence repetitions is non-zero.",1,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"from","easy_plugin::arguments","",4,{"inputs":[{"name":"match"}],"output":{"name":"attribute"}}],[11,"from","syntax::codemap","",5,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"from","syntax::ptr","",6,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"from","syntax::codemap","",5,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"from","syntax::ptr","",6,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"from","syntax::codemap","",5,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"from","syntax::ptr","",6,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"from","syntax::codemap","",5,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"from","easy_plugin::arguments","",7,{"inputs":[{"name":"match"}],"output":{"name":"lit"}}],[11,"from","syntax::ptr","",6,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"from","","",6,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"from","syntax::codemap","",5,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"from","easy_plugin::arguments","",8,{"inputs":[{"name":"match"}],"output":{"name":"stmt"}}],[11,"from","syntax::ptr","",6,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"from","syntax::codemap","",5,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"from","syntax::ast","",9,{"inputs":[{"name":"match"}],"output":{"name":"tokentree"}}],[11,"from","collections::vec","",10,{"inputs":[{"name":"match"}],"output":{"name":"vec"}}],[11,"from","syntax::codemap","",5,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"from","","",5,{"inputs":[{"name":"match"}],"output":{"name":"spanned"}}],[11,"hash","easy_plugin","",2,null],[11,"eq","","",2,{"inputs":[{"name":"amount"},{"name":"amount"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"amount"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"amount"}],"output":{"name":"amount"}}],[11,"eq","","",3,{"inputs":[{"name":"specifier"},{"name":"specifier"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"specifier"},{"name":"specifier"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"specifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"specifier"}],"output":{"name":"specifier"}}],[11,"specific_ident","","Returns a new `Specifier` corresponding to the given identifier.",3,{"inputs":[{"name":"str"}],"output":{"name":"specifier"}}],[11,"specific_lftm","","Returns a new `Specifier` corresponding to the given lifetime.",3,{"inputs":[{"name":"str"}],"output":{"name":"specifier"}}],[11,"get_name","","Returns the name of this specifier, if applicable.",3,{"inputs":[{"name":"specifier"}],"output":{"name":"option"}}],[11,"to_fields","","Returns `Field`s that would initialize values matched by this specifier.",3,null],[11,"to_struct_fields","","Returns `StructField`s that could contain values matched by this specifier.",3,{"inputs":[{"name":"specifier"},{"name":"extctxt"},{"name":"span"}],"output":{"name":"vec"}}],[11,"eq","","",0,{"inputs":[{"name":"specification"},{"name":"specification"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"specification"},{"name":"specification"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"specification"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"specification"}],"output":{"name":"specification"}}],[11,"to_fields","","Returns `Field`s that would initialize values matched by this specification.",0,null],[11,"to_struct_fields","","Returns `StructField`s that could contain values matched by this specification.",0,{"inputs":[{"name":"specification"},{"name":"extctxt"},{"name":"span"}],"output":{"name":"vec"}}],[11,"deref","","",0,null],[6,"PluginResult","","A result type suitable for reporting errors in plugins.",null,null],[14,"spec!","","Constructs a `Specification`.",null,null]],"paths":[[3,"Specification"],[4,"Match"],[4,"Amount"],[4,"Specifier"],[6,"Attribute"],[3,"Spanned"],[3,"P"],[6,"Lit"],[6,"Stmt"],[4,"TokenTree"],[3,"Vec"]]};
initSearch(searchIndex);
