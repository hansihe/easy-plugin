var searchIndex = {};
searchIndex["easy_plugin"] = {"doc":"This crate provides a compiler plugin, `easy_plugin!`, which makes it easier to write compiler\nplugins.","items":[[4,"Match","easy_plugin","A plugin argument that has been matched with a named specifier.",null,null],[13,"Attr","","An attribute (e.g., `#[cfg(target_os = &quot;windows&quot;)]`).",0,null],[13,"BinOp","","A binary operator (e.g., `+`, `*`).",0,null],[13,"Block","","A brace-delimited sequence of statements (e.g., `{ log(error, &quot;hi&quot;); return 12; }`).",0,null],[13,"Delim","","A delimited sequence of token trees (e.g., `()`, `[foo - &quot;bar&quot;]`).",0,null],[13,"Expr","","An expression (e.g., `2 + 2`, `if true { 1 } else { 2 }`, `f(42)`).",0,null],[13,"Ident","","An identifier (e.g., `x`, `foo`).",0,null],[13,"Item","","An item (e.g., `fn foo() { }`, `struct Bar;`).",0,null],[13,"Lftm","","A lifetime (e.g., `&#39;a`).",0,null],[13,"Lit","","A literal (e.g., `322`, `&#39;a&#39;`, `&quot;foo&quot;`).",0,null],[13,"Meta","","A &quot;meta&quot; item, as found in attributes (e.g., `cfg(target_os = &quot;windows&quot;)`).",0,null],[13,"Pat","","A pattern (e.g., `Some(t)`, `(17, &#39;a&#39;)`, `_`).",0,null],[13,"Path","","A qualified name (e.g., `T::SpecialA`).",0,null],[13,"Stmt","","A single statement (e.g., `let x = 3`).",0,null],[13,"Ty","","A type (e.g., `i32`, `Vec&lt;(char, String)&gt;`, `&amp;T`).",0,null],[13,"Tok","","A single token.",0,null],[13,"Tt","","A single token tree.",0,null],[13,"Sequence","","A sequence which may either contain sequence matches or subsequences.",0,null],[13,"NamedSequence","","A count of named sequence repetitions.",0,null],[4,"Amount","","Indicates how many times a sequence is allowed to occur.",null,null],[13,"OneOrMore","","`+`",1,null],[13,"ZeroOrMore","","`*`",1,null],[13,"ZeroOrOne","","`?`",1,null],[4,"Specifier","","A piece of a plugin argument specification.",null,null],[13,"Attr","","An attribute (e.g., `#[cfg(target_os = &quot;windows&quot;)]`).",2,null],[13,"BinOp","","A binary operator (e.g., `+`, `*`).",2,null],[13,"Block","","A brace-delimited sequence of statements (e.g., `{ log(error, &quot;hi&quot;); return 12; }`).",2,null],[13,"Delim","","A delimited sequence of token trees (e.g., `()`, `[foo - &quot;bar&quot;]`).",2,null],[13,"Expr","","An expression (e.g., `2 + 2`, `if true { 1 } else { 2 }`, `f(42)`).",2,null],[13,"Ident","","An identifier (e.g., `x`, `foo`).",2,null],[13,"Item","","An item (e.g., `fn foo() { }`, `struct Bar;`).",2,null],[13,"Lftm","","A lifetime (e.g., `&#39;a`).",2,null],[13,"Lit","","A literal (e.g., `322`, `&#39;a&#39;`, `&quot;foo&quot;`).",2,null],[13,"Meta","","A &quot;meta&quot; item, as found in attributes (e.g., `cfg(target_os = &quot;windows&quot;)`).",2,null],[13,"Pat","","A pattern (e.g., `Some(t)`, `(17, &#39;a&#39;)`, `_`).",2,null],[13,"Path","","A qualified name (e.g., `T::SpecialA`).",2,null],[13,"Stmt","","A single statement (e.g., `let x = 3`).",2,null],[13,"Ty","","A type (e.g., `i32`, `Vec&lt;(char, String)&gt;`, `&amp;T`).",2,null],[13,"Tok","","A single token.",2,null],[13,"Tt","","A single token tree.",2,null],[13,"Specific","","A non-variable piece.",2,null],[13,"Delimited","","A delimited piece.",2,null],[13,"Sequence","","A sequence piece.",2,null],[13,"NamedSequence","","A named sequence piece.",2,null],[5,"parse_arguments","","Parses the supplied arguments with the supplied specification.",null,null],[5,"parse_specification","","Parses the supplied specification.",null,null],[11,"eq","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"match"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"match"}],"output":{"name":"match"}}],[11,"as_attr","","Returns this attribute match.",0,{"inputs":[{"name":"match"}],"output":{"name":"attribute"}}],[11,"as_binop","","Returns this binary operator match.",0,{"inputs":[{"name":"match"}],"output":{"name":"binoptoken"}}],[11,"as_block","","Returns this block match.",0,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"as_delim","","Returns this delimited match.",0,{"inputs":[{"name":"match"}],"output":{"name":"rc"}}],[11,"as_expr","","Returns this expression match.",0,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"as_ident","","Returns this identifier match.",0,{"inputs":[{"name":"match"}],"output":{"name":"ident"}}],[11,"as_item","","Returns this item match.",0,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"as_lftm","","Returns this lifetime match.",0,{"inputs":[{"name":"match"}],"output":{"name":"name"}}],[11,"as_lit","","Returns this literal match.",0,{"inputs":[{"name":"match"}],"output":{"name":"lit"}}],[11,"as_meta","","Returns this &quot;meta&quot; item match.",0,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"as_pat","","Returns this pattern match.",0,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"as_path","","Returns this path match.",0,{"inputs":[{"name":"match"}],"output":{"name":"path"}}],[11,"as_stmt","","Returns this statement match.",0,{"inputs":[{"name":"match"}],"output":{"name":"stmt"}}],[11,"as_ty","","Returns this type match.",0,{"inputs":[{"name":"match"}],"output":{"name":"p"}}],[11,"as_tok","","Returns this token match.",0,{"inputs":[{"name":"match"}],"output":{"name":"token"}}],[11,"as_tt","","Returns this token tree match.",0,{"inputs":[{"name":"match"}],"output":{"name":"tokentree"}}],[11,"as_sequence","","Returns this collection of sequence matches or subsequences.",0,{"inputs":[{"name":"match"}],"output":{"name":"vec"}}],[11,"as_named_sequence","","Returns this count of named sequence repetitions.",0,{"inputs":[{"name":"match"}],"output":{"name":"usize"}}],[11,"as_named_sequence_bool","","Returns whether this count of named sequence repetitions is non-zero.",0,{"inputs":[{"name":"match"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"amount"},{"name":"amount"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"amount"},{"name":"amount"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"amount"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"amount"}],"output":{"name":"amount"}}],[11,"eq","","",2,{"inputs":[{"name":"specifier"},{"name":"specifier"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"specifier"},{"name":"specifier"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"specifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"specifier"}],"output":{"name":"specifier"}}],[11,"specific_ident","","Returns a new `Specifier` corresponding to the given identifier.",2,{"inputs":[{"name":"str"}],"output":{"name":"specifier"}}],[11,"specific_lftm","","Returns a new `Specifier` corresponding to the given lifetime.",2,{"inputs":[{"name":"str"}],"output":{"name":"specifier"}}],[11,"get_name","","Returns the name of this specifier, if applicable.",2,{"inputs":[{"name":"specifier"}],"output":{"name":"option"}}],[6,"PluginResult","","A result type suitable for reporting errors in plugins.",null,null]],"paths":[[4,"Match"],[4,"Amount"],[4,"Specifier"]]};
initSearch(searchIndex);
